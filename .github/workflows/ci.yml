name: CI

on:
  push:
    branches: [jpc/layoutURL-deeplinking, jpc/static-demo]
  pull_request:

jobs:
  test:
    runs-on: ${{ matrix.os }}

    # Run each command in parallel with the same setup steps.
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
        config:
          # Specify names so that the GitHub branch protection settings for
          # required checks don't need to change if we ever change the commands used.
          - name: lint
            command: |
              # lint steps
              set -x
              yarn license-check
              yarn dedupe --check
              yarn run tsc --noEmit # typecheck files that are not included by webpack or package builds
              yarn run lint:ci
              yarn run lint:unused-exports
          - name: web
            command: yarn run web:build:prod
          - name: test
            command: yarn run test --maxWorkers=100%

    name: ${{ matrix.config.name }} (${{ matrix.os }})

    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true

      - uses: actions/setup-node@v3.1.1
        with:
          node-version: 14.x

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .yarn/cache
            **/node_modules
          key: v5-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: v5-${{ runner.os }}-yarn-

      - run: yarn install --immutable

      - run: ${{ matrix.config.command }}

  storybook:
    name: storybook (ubuntu-20.04)
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required for Chromatic
          lfs: true

      - uses: actions/setup-node@v3.1.1
        with:
          node-version: 14.x

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .yarn/cache
            **/node_modules
          key: v5-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: v5-${{ runner.os }}-yarn-

      - run: yarn install --immutable

      - run: yarn workspace @foxglove/studio-base run storybook:build

      # Chromatic only runs on pushes or pulls to our source repo
      - uses: chromaui/action@v1
        if: ${{ github.event.repository.full_name == 'foxglove/studio' }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          projectToken: f50040a29fb8
          storybookBuildDir: storybook-static
          autoAcceptChanges: main
          exitOnceUploaded: true

  integration:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]

    name: integration (${{ matrix.os }})

    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true

      - uses: actions/setup-node@v3.1.1
        with:
          node-version: 14.x

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .yarn/cache
            **/node_modules
          key: v5-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: v5-${{ runner.os }}-yarn-

      - run: yarn install --immutable

      - name: test:integration
        if: matrix.os == 'ubuntu-20.04'
        uses: GabrielBB/xvfb-action@v1.6
        with:
          working-directory: ./
          run: yarn run test:integration

      - name: test:integration
        if: matrix.os != 'ubuntu-20.04'
        run: yarn run test:integration

  docker:
    name: Publish to GHCR
    runs-on: ubuntu-20.04
    needs: test

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout jpc/layoutURL-deeplinking
        uses: actions/checkout@v2
        with:
          ref: jpc/layoutURL-deeplinking
          lfs: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker tags
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository }}
          tags: latest

      - name: Configure QEMU
        uses: docker/setup-qemu-action@v1

      - name: Configure Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  gitlab-pages:
    name: Deploy to GitLab pages
    runs-on: ubuntu-20.04
    # needs: test

    permissions:
      contents: read

    steps:
      - name: Checkout jpc/static-demo
        uses: actions/checkout@v2
        with:
          ref: jpc/static-demo
          lfs: true

      - run: yarn install --immutable

      - name: Build the app
        run: yarn run web:build:prod

      - name: Upload to GitLab Pages
        run: |
          cp carlafox_subset.bag web/.webpack
          cp pages-gitlab-ci.yml web/.webpack/.gitlab-ci.yml
          cd web/.webpack
          git init -b main .
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git lfs track '*.bag'
          git add .
          git commit -m 'compiled app'
          git remote add origin https://bot:${{ secrets.GITLAB_ACCESS_TOKEN }}@gitlab.collabora.com/jpc/rosbag-test.git
          git push -f -u origin main
